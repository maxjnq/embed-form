// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  username    String  @unique
  name        String?
  autoUpgrade Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image        UserImage?
  password     Password?
  notes        Note[]
  roles        Role[]
  lists        List[]
  links        Link[]
  sessions     Session[]
  connections  Connection[]
  subscription Subscription?
  feedback     Feedback[]
}

model List {
  id                      String                @id @default(uuid())
  userId                  String
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  name                    String
  url                     String                @unique
  content                 String?
  trackings               Tracking[]
  subs                    Sub[]
  signUpPage              ListSignUpPage        @relation(fields: [listSignUpPageId], references: [id], onDelete: Cascade)
  signUpForm              ListSignUpForm        @relation(fields: [listSignUpFormId], references: [id], onDelete: Cascade)
  confirmationPage        ListConfirmationPage  @relation(fields: [listConfirmationPageId], references: [id], onDelete: Cascade)
  confirmationEmail       ListConfirmationEmail @relation(fields: [listConfirmationEmailId], references: [id], onDelete: Cascade)
  settings                ListSettings          @relation(fields: [listSettingsId], references: [id], onDelete: Cascade)
  listSignUpPageId        String
  listSignUpFormId        String
  listConfirmationPageId  String
  listConfirmationEmailId String
  listSettingsId          String
  ListMetrics             ListMetrics[]

  icon    ListIcon?
  logo    ListLogo?
  ogImage ListGraphQLImage?
  images  ListImage[]

  @@index([userId])
}

model Sub {
  id           String    @id @default(uuid())
  isGDPR       Boolean   @default(false)
  isVerified   Boolean   @default(false)
  verifyToken  String?   @unique
  shortId      String    @unique
  createdAt    DateTime  @default(now())
  createdDay   DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  referredBy   Sub?      @relation("SubToSub", fields: [referredById], references: [id])
  referredSubs Sub[]     @relation("SubToSub")
  referredById String?
  referrals    Int       @default(0)
  position     Int?
  list         List      @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId       String
  email        String
  name         String?
  tracking     Tracking? @relation(fields: [trackingId], references: [id])
  trackingId   String?

  @@index([listId])
  @@index([createdAt(Asc)])
  @@index([createdDay(Asc)])
  @@index([listId, createdAt(Asc)])
}

model Tracking {
  id        String   @id @default(uuid())
  shortId   String   @unique
  name      String   @default("Somewhere")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  region    String?
  latitude  Float?
  longitude Float?
  subs      Sub[]
  list      List?    @relation(fields: [listId], references: [id])
  listId    String?
}

model ListSettings {
  id                   String @id @default(uuid())
  logoWidth            Int    @default(80)
  accentColor          String @default("#1CC94D")
  borderColor          String @default("#E5E5E5")
  textColor            String @default("#000000")
  backgroundPageColor  String @default("#FFFFFF")
  backgroundInputColor String @default("#F8F8F8")
  buttonTextColor      String @default("#000000")
  inputHeight          String @default("55px")
  radius               String @default("8px")
  borderWidth          String @default("1px")
  loadingBarHeight     String @default("2px")
  startFrom            Int    @default(0)
  links                Link[]

  list List[]
}

model Link {
  id             String        @id @default(uuid())
  url            String
  title          String?
  ListSettings   ListSettings? @relation(fields: [listSettingsId], references: [id])
  listSettingsId String?
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?
}

model ListSignUpPage {
  id          String  @id @default(uuid())
  title       String  @default("Join my waitlist")
  placeholder String  @default("Enter your email")
  cta         String  @default("Join")
  description String  @default("My cool product is coming soon! Join the waitlist to be the first to know when it's ready.")
  enableLogo  Boolean @default(true)
  enableName  Boolean @default(true)
  enablePage  Boolean @default(true)
  redirectUrl String? @default("")
  news        String? @default("100 subscribers in 24 hours!")
  content     String  @default("Here is some content to help you understand what you're signing up for.")
  list        List[]
}

model ListSignUpForm {
  id   String @id @default(uuid())
  List List[]
}

model ListConfirmationPage {
  id          String @id @default(uuid())
  title       String @default("You've been added to the list!")
  description String @default("You'll receive an email shortly to confirm your subscription.")
  content     String @default("")
  cta         String @default("Send invite")
  placeholder String @default("Your friend's email")
  List        List[]
}

model ListConfirmationEmail {
  id      String @id @default(uuid())
  subject String @default("Thank you for signing up!")
  preview String @default("Welcome! So cool to have you here.")
  replyto String @default("elon@musk.com")
  from    String @default("mail@wt.ls")
  body    String @default("Welcome to the list! We're so excited to have you here. You'll be the first to know when we're ready to launch.")
  List    List[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model ListImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String

  // non-unique foreign key
  @@index([listId])
}

model ListIcon {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String @unique

  // non-unique foreign key
  @@index([listId])
}

model ListLogo {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String @unique

  // non-unique foreign key
  @@index([listId])
}

model ListGraphQLImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String @unique

  // non-unique foreign key
  @@index([listId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model WebhookEvent {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            String
  processingError String?
}

model Plan {
  id            Int            @id @default(autoincrement())
  productId     Int
  planId        Int            @unique
  name          String?
  description   String?
  variantName   String
  sort          Int
  status        String
  price         Int
  interval      String
  intervalCount Int            @default(1)
  subscriptions Subscription[]
}

model Subscription {
  id                      String    @id @default(uuid())
  lemonId                 String
  name                    String
  variantName             String
  status                  String
  customerPortalLink      String
  price                   Int
  updatePaymentMethodLink String
  limit                   Int       @default(250)
  renewsAt                DateTime?
  endsAt                  DateTime?
  trialEndsAt             DateTime?
  resumesAt               DateTime?
  cancelled               Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                  String    @unique
  plan                    Plan      @relation(fields: [planId], references: [id])
  planId                  Int
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String? // use chapgpt to generate a title
  message   String
  votes     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model ListMetrics {
  id     String @id @default(cuid())
  subs   Int    @default(0)
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String
}
